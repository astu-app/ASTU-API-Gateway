/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package api.request.client.apis

import api.request.client.models.AddRequestDTO
import api.request.client.models.FailRequestDTO
import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.request.*
import io.ktor.client.request.forms.*
import io.ktor.http.*
import io.ktor.http.content.*
import api.request.client.models.RequestDTO
import java.util.*

class RequestControllerApi(val client: HttpClient, private val basePath: String = "http://localhost:8085") {

    /**
     *
     *
     * @param body
     * @param userId
     * @return java.util.UUID
     */
    suspend fun addRequest(body: AddRequestDTO, userId: UUID): UUID {
        val response = client.post("${basePath}api/request/user/{$userId}") {
            contentType(ContentType.Application.Json)
            setBody(body)
        }

        return when (response.status) {
            HttpStatusCode.OK -> response.body<UUID>()
            else -> throw Exception("Request failed")
        }
    }

    /**
     *
     *
     * @param body
     * @param id
     * @return void
     */
    suspend fun fail(body: FailRequestDTO, id: UUID) {
        val response = client.post("${basePath}api/request/{$id}/fail") {
            contentType(ContentType.Application.Json)
            setBody(body)
        }

        return when (response.status) {
            HttpStatusCode.OK -> Unit
            else -> throw Exception("Request failed")
        }
    }

    /**
     *
     *
     * @param departmentId
     * @return kotlin.Array<RequestDTO>
     */
    suspend fun getRequestsForEmployee(departmentId: UUID): List<RequestDTO> {
        val response = client.get("${basePath}api/request/department/{$departmentId}")

        return when (response.status) {
            HttpStatusCode.OK -> response.body<List<RequestDTO>>()
            else -> throw Exception("Request failed")
        }
    }

    /**
     *
     *
     * @param userId
     * @return kotlin.Array<RequestDTO>
     */
    suspend fun getRequestsForUser(userId: UUID): List<RequestDTO> {
        val response = client.get("${basePath}api/request/user/{$userId}")

        return when (response.status) {
            HttpStatusCode.OK -> response.body<List<RequestDTO>>()
            else -> throw Exception("Request failed")
        }
    }

    /**
     *
     *
     * @param userId
     * @return void
     */
    suspend fun removeRequest(requestId: UUID) {
        val response = client.delete("${basePath}api/request/user/{$requestId}")

        return when (response.status) {
            HttpStatusCode.OK -> Unit
            else -> throw Exception("Request failed")
        }
    }

    /**
     *
     *
     * @param id
     * @param files  (optional)
     * @return void
     */
    suspend fun success(id: UUID, files: List<PartData>) {
        val response = client.post("${basePath}api/request/$id/success") {
            contentType(ContentType.MultiPart.FormData)
            setBody(
                MultiPartFormDataContent(
                    files
                )
            )
        }

        return when (response.status) {
            HttpStatusCode.OK -> Unit
            else -> throw Exception("Request failed")
        }
    }
}
